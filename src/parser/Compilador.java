/* Generated By:JJTree&JavaCC: Do not edit this line. Compilador.java */
package parser;
import recovery.*;
import view.Tela;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import arquivos.CreateFile;
import java.io.FileWriter;
import javax.swing.JFileChooser;

public class Compilador/*@bgen(jjtree)*/implements CompiladorTreeConstants, CompiladorConstants {/*@bgen(jjtree)*/
  protected static JJTCompiladorState jjtree = new JJTCompiladorState();final static Tela window = new Tela();

  public static void main(String args []) throws ParseException
  {
    window.frmTela.setVisible(true);

                window.getCompilar().addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {

                                window.setVazioConsoleMsg();

                                if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)
                {
                  window.setControleArquivo(false);
                }


                if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )
                {
                                        inicia();
                                }else
                                {
                                        if(window.getTextArquivo().getText().equals(""))
                        {
                            JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);
                        }else{
                          int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");

                          if(resp == 0)
                          {

                            if(window.getFile() == null)
                            {
                                window.salvarComo();
                                                        inicia();

                            }else
                            {
                                window.salvar();
                                                        inicia();
                            }
                          }
                        }
                                }
                        }
                });
  }


  static void inicia(){
    FileReader arql = null;

    try {
                        arql = new FileReader(window.getFile());
                } catch (FileNotFoundException e2) {
                        e2.printStackTrace();
                }
                BufferedReader arq = new BufferedReader(arql);
            try
            {
              Compilador parser = new Compilador(arq);
            }catch (Exception e1)
            {
              Compilador.ReInit(arq);
            }catch (Error e1)
                {
                  Compilador.ReInit(arq);
                }

        try
        {
                SimpleNode n = Compilador.main();
                        n.dump(" ", window);
                }
                catch (Exception e1)
        {}
                catch (Error e1)
                {}
  }


  static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\u005c"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static Token lastError = null;

  static boolean eof;

  static void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token tok;
    window.setConsole("\u005cn*** " + met + " ***");
    window.setConsole("\u005cn     Conjunto de sincroniza\u00e7\u00e3o: " + g);
    if (g == null) throw e;
    tok = getToken(1);
    while (!eof)
    {
      if (g.contains(tok.kind))
      {
        window.setConsole("\u005cn     Encontrado token de sincroniza\u00e7\u00e3o: " + im(tok.kind));
        break;
      }
      window.setConsole("\u005cn     Ignorando o token: " + im(tok.kind));
      getNextToken();
      tok = getToken(1);
      if (tok.kind == EOF && !g.contains(EOF))
      eof = true;
    }
    if (tok != lastError)
    {
      window.setConsole(e.getMessage());
      lastError = tok;
    }
    if (eof) throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public void tipoInteiro() throws ParseException {
    trace_call("tipoInteiro");
    try {
 /*@bgen(jjtree) tipoInteiro */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.tipoInteiro;
      try {
        try {
          jj_consume_token(TIPOINTEIRO);
        } catch (ParseException e) {
       try {
            consumeUntil(sincronizacao, e, "tipoInteiro");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipoInteiro");
    }
  }

  static final public void tipoBool() throws ParseException {
    trace_call("tipoBool");
    try {
 /*@bgen(jjtree) tipoBool */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.tipoBool;
      try {
        try {
          jj_consume_token(TIPOBOOL);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "tipoBool");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipoBool");
    }
  }

  static final public void tipoString() throws ParseException {
    trace_call("tipoString");
    try {
 /*@bgen(jjtree) tipoString */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.tipoString;
      try {
        try {
          jj_consume_token(TIPOSTRING);
        } catch (ParseException e) {
        try {
            consumeUntil(sincronizacao, e, "tipoString");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipoString");
    }
  }

  static final public void numero() throws ParseException {
    trace_call("numero");
    try {
 /*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.numero;
      try {
        try {
          jj_consume_token(NUMERO);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "numero");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("numero");
    }
  }

  static final public void id() throws ParseException {
    trace_call("id");
    try {
 /*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.id;
      try {
        try {
          jj_consume_token(ID);
        } catch (ParseException e) {
        try {
                        consumeUntil(sincronizacao, e, "id");
          } catch(ParseEOFException erro) {}
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("id");
    }
  }

  static final public void aspas() throws ParseException {
    trace_call("aspas");
    try {
 /*@bgen(jjtree) aspas */
  SimpleNode jjtn000 = new SimpleNode(JJTASPAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.aspas;
      try {
        try {
          jj_consume_token(ASPAS);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "aspas");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("aspas");
    }
  }

  static final public void virgula() throws ParseException {
    trace_call("virgula");
    try {
 /*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.virgula;
      try {
        try {
          jj_consume_token(VIRGULA);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "virgula");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("virgula");
    }
  }

  static final public void condIf() throws ParseException {
    trace_call("condIf");
    try {
 /*@bgen(jjtree) condIf */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.condIf;
      try {
        try {
          jj_consume_token(CONDIF);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "condIf");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("condIf");
    }
  }

  static final public void condElse() throws ParseException {
    trace_call("condElse");
    try {
 /*@bgen(jjtree) condElse */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.condElse;
      try {
        try {
          jj_consume_token(CONDELSE);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "condElse");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("condElse");
    }
  }

  static final public void repWhile() throws ParseException {
    trace_call("repWhile");
    try {
 /*@bgen(jjtree) repWhile */
  SimpleNode jjtn000 = new SimpleNode(JJTREPWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.repWhile;
      try {
        try {
          jj_consume_token(REPWHILE);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "repWhile");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("repWhile");
    }
  }

  static final public void repFor() throws ParseException {
    trace_call("repFor");
    try {
 /*@bgen(jjtree) repFor */
  SimpleNode jjtn000 = new SimpleNode(JJTREPFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.repFor;
      try {
        try {
          jj_consume_token(REPFOR);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "repFor");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("repFor");
    }
  }

  static final public void entao() throws ParseException {
    trace_call("entao");
    try {
 /*@bgen(jjtree) entao */
  SimpleNode jjtn000 = new SimpleNode(JJTENTAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.entao;
      try {
        try {
          jj_consume_token(ENTAO);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "entao");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("entao");
    }
  }

  static final public void mais() throws ParseException {
    trace_call("mais");
    try {
 /*@bgen(jjtree) mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.mais;
      try {
        try {
          jj_consume_token(MAIS);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "mais");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("mais");
    }
  }

  static final public void menos() throws ParseException {
    trace_call("menos");
    try {
 /*@bgen(jjtree) menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.menos;
      try {
        try {
          jj_consume_token(MENOS);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "menos");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("menos");
    }
  }

  static final public void multi() throws ParseException {
    trace_call("multi");
    try {
 /*@bgen(jjtree) multi */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.multi;
      try {
        try {
          jj_consume_token(MULTI);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "multi");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("multi");
    }
  }

  static final public void div() throws ParseException {
    trace_call("div");
    try {
 /*@bgen(jjtree) div */
  SimpleNode jjtn000 = new SimpleNode(JJTDIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.div;
      try {
        try {
          jj_consume_token(DIV);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "div");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("div");
    }
  }

  static final public void maior() throws ParseException {
    trace_call("maior");
    try {
 /*@bgen(jjtree) maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.maior;
      try {
        try {
          jj_consume_token(MAIOR);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "maior");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("maior");
    }
  }

  static final public void menor() throws ParseException {
    trace_call("menor");
    try {
 /*@bgen(jjtree) menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.menor;
      try {
        try {
          jj_consume_token(MENOR);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "menor");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("menor");
    }
  }

  static final public void atribui() throws ParseException {
    trace_call("atribui");
    try {
 /*@bgen(jjtree) atribui */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.atribui;
      try {
        try {
          jj_consume_token(ATRIBUI);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "atribui");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("atribui");
    }
  }

  static final public void inicioPrograma() throws ParseException {
    trace_call("inicioPrograma");
    try {
 /*@bgen(jjtree) inicioPrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.inicioPrograma;
      try {
        try {
          jj_consume_token(INICIOPROGRAMA);
        } catch (ParseException e) {
        try {
                        consumeUntil(sincronizacao, e, "inicioPrograma");
          } catch(ParseEOFException erro) {}
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("inicioPrograma");
    }
  }

  static final public void abreBloco() throws ParseException {
    trace_call("abreBloco");
    try {
 /*@bgen(jjtree) abreBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTABREBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.abreBloco;
      try {
        try {
          jj_consume_token(ABREBLOCO);
        } catch (ParseException e) {
       try {
                consumeUntil(sincronizacao, e, "abreBloco");
         }catch(ParseEOFException erro) {}
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("abreBloco");
    }
  }

  static final public void fimBloco() throws ParseException {
    trace_call("fimBloco");
    try {
 /*@bgen(jjtree) fimBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.fimBloco;
      try {
        try {
          jj_consume_token(FIMBLOCO);
        } catch (ParseException e) {
                try {
                        consumeUntil(sincronizacao, e, "fimBloco");
                  }catch(ParseEOFException erro) {}
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("fimBloco");
    }
  }

  static final public void abreBloCond() throws ParseException {
    trace_call("abreBloCond");
    try {
 /*@bgen(jjtree) abreBloCond */
  SimpleNode jjtn000 = new SimpleNode(JJTABREBLOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.abreBloCond;
      try {
        try {
          jj_consume_token(ABREBLOCOND);
        } catch (ParseException e) {
                try {
            consumeUntil(sincronizacao, e, "abreBloCond");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("abreBloCond");
    }
  }

  static final public void fechaBloCond() throws ParseException {
    trace_call("fechaBloCond");
    try {
 /*@bgen(jjtree) fechaBloCond */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHABLOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.fechaBloCond;
      try {
        try {
          jj_consume_token(FECHABLOCOND);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "fechaBloCond");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("fechaBloCond");
    }
  }

  static final public void diferente() throws ParseException {
    trace_call("diferente");
    try {
 /*@bgen(jjtree) diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.diferente;
      try {
        try {
          jj_consume_token(DIFERENTE);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "diferente");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("diferente");
    }
  }

  static final public void menorIgual() throws ParseException {
    trace_call("menorIgual");
    try {
 /*@bgen(jjtree) menorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.menorIgual;
      try {
        try {
          jj_consume_token(MENORIGUAL);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "menorIgual");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("menorIgual");
    }
  }

  static final public void maiorIgual() throws ParseException {
    trace_call("maiorIgual");
    try {
 /*@bgen(jjtree) maiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.maiorIgual;
      try {
        try {
          jj_consume_token(MAIORIGUAL);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "maiorIgual");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("maiorIgual");
    }
  }

  static final public void igual() throws ParseException {
    trace_call("igual");
    try {
 /*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.igual;
      try {
        try {
          jj_consume_token(IGUAL);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "igual");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("igual");
    }
  }

  static final public void e() throws ParseException {
    trace_call("e");
    try {
 /*@bgen(jjtree) e */
  SimpleNode jjtn000 = new SimpleNode(JJTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.e;
      try {
        try {
          jj_consume_token(E);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "e");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("e");
    }
  }

  static final public void ou() throws ParseException {
    trace_call("ou");
    try {
 /*@bgen(jjtree) ou */
  SimpleNode jjtn000 = new SimpleNode(JJTOU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.ou;
      try {
        try {
          jj_consume_token(OU);
        } catch (ParseException e) {
      try {
            consumeUntil(sincronizacao, e, "ou");
        } catch (ParseEOFException e1) {
            e1.printStackTrace();
        }
        }
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("ou");
    }
  }

  static final public SimpleNode main() throws ParseException {
    trace_call("main");
    try {
 /*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        inicioPrograma();
        id();
        abreBloco();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TIPOINTEIRO:
          case TIPOBOOL:
          case TIPOSTRING:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          defineVariaveis();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FECHABLOCOND:
          case CONDIF:
          case REPWHILE:
          case REPFOR:
          case ID:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          corpo();
        }
        fimBloco();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
      } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("main");
    }
  }

  static final public void tipoDado() throws ParseException {
    trace_call("tipoDado");
    try {
 /*@bgen(jjtree) tipoDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.tipoDado;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TIPOINTEIRO:
            tipoInteiro();
            break;
          case TIPOBOOL:
            tipoBool();
            break;
          case TIPOSTRING:
            tipoString();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "tipoDado");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipoDado");
    }
  }

  static final public void tipo_Calculo() throws ParseException {
    trace_call("tipo_Calculo");
    try {
 /*@bgen(jjtree) tipo_Calculo */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_CALCULO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.tipo_Calculo;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MAIS:
            mais();
            break;
          case MENOS:
            menos();
            break;
          case MULTI:
            multi();
            break;
          case DIV:
            div();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "tipo_Calculo");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipo_Calculo");
    }
  }

  static final public void tipoComparacao() throws ParseException {
    trace_call("tipoComparacao");
    try {
 /*@bgen(jjtree) tipoComparacao */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOCOMPARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.tipoComparacao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MAIOR:
            maior();
            break;
          case MENOR:
            menor();
            break;
          case MENORIGUAL:
            menorIgual();
            break;
          case MAIORIGUAL:
            maiorIgual();
            break;
          case DIFERENTE:
            diferente();
            break;
          case IGUAL:
            igual();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "tipoComparacao");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipoComparacao");
    }
  }

  static final public void tipoOperadorLogico() throws ParseException {
    trace_call("tipoOperadorLogico");
    try {
 /*@bgen(jjtree) tipoOperadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.tipoOperadorLogico;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case E:
            e();
            cond();
            break;
          case OU:
            ou();
            cond();
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "tipoOperadorLogico");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipoOperadorLogico");
    }
  }

  static final public void corpo() throws ParseException {
    trace_call("corpo");
    try {
 /*@bgen(jjtree) corpo */
  SimpleNode jjtn000 = new SimpleNode(JJTCORPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.corpo;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            id();
            atribuicaoVar();
            break;
          case CONDIF:
            condIf();
            cond();
            label_3:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case E:
              case OU:
                ;
                break;
              default:
                jj_la1[6] = jj_gen;
                break label_3;
              }
              tipoOperadorLogico();
            }
            entao();
            abreBloCond();
            corpo();
            fechaBloCond();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CONDELSE:
              condElse();
              abreBloCond();
              corpo();
              fechaBloCond();
              break;
            default:
              jj_la1[7] = jj_gen;
              ;
            }
            break;
          case REPWHILE:
            repWhile();
            cond();
            label_4:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case E:
              case OU:
                ;
                break;
              default:
                jj_la1[8] = jj_gen;
                break label_4;
              }
              tipoOperadorLogico();
            }
            abreBloCond();
            corpo();
            fechaBloCond();
            break;
          case REPFOR:
            repFor();
            id();
            atribuicaoVar();
            virgula();
            id();
            tipoComparacao();
            id();
            virgula();
            id();
            atribuicaoVar();
            abreBloCond();
            corpo();
            fechaBloCond();
            break;
          case FECHABLOCOND:
            fechaBloCond();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "corpo");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("corpo");
    }
  }

  static final public void input() throws ParseException {
    trace_call("input");
    try {
 /*@bgen(jjtree) input */
  SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.input;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            id();
            break;
          case NUMERO:
            numero();
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "input");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("input");
    }
  }

  static final public void defineVariaveis() throws ParseException {
    trace_call("defineVariaveis");
    try {
 /*@bgen(jjtree) defineVariaveis */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINEVARIAVEIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.defineVariaveis;
      try {
        try {
          tipoDado();
          id();
          label_5:
          while (true) {
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ATRIBUI:
                ;
                break;
              default:
                jj_la1[11] = jj_gen;
                break label_6;
              }
              atribuicaoVar();
            }
            virgula();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VIRGULA:
            case ATRIBUI:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_5;
            }
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "defineVariaveis");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("defineVariaveis");
    }
  }

  static final public void atribuicaoVar() throws ParseException {
    trace_call("atribuicaoVar");
    try {
 /*@bgen(jjtree) atribuicaoVar */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAOVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.atribuicaoVar;
      try {
        try {
          atribui();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            numero();
            break;
          case ASPAS:
            aspas();
            id();
            aspas();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "atribuicaoVar");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("atribuicaoVar");
    }
  }

  static final public void cond() throws ParseException {
    trace_call("cond");
    try {
 /*@bgen(jjtree) cond */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.cond;
      try {
        try {
          setCond();
          tipoComparacao();
          setCond();
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "sincronizacao");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("cond");
    }
  }

  static final public void setCond() throws ParseException {
    trace_call("setCond");
    try {
 /*@bgen(jjtree) setCond */
  SimpleNode jjtn000 = new SimpleNode(JJTSETCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sincronizacao = First.atribuicaoVar;
      try {
        try {
          input();
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MAIS:
            case MENOS:
            case MULTI:
            case DIV:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_7;
            }
            tipo_Calculo();
            input();
          }
        } catch (ParseException e) {
        consumeUntil(sincronizacao, e, "atribuicaoVar");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("setCond");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c0,0x236000,0x1c0,0x80000000,0x1e000000,0x60000000,0x60000000,0x8000,0x60000000,0x236000,0x280000,0x0,0x1000000,0x880000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x7,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x7,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
    	window.setConsole("\n");
      for (int i = 0; i < trace_indent; i++) { window.setConsole(" "); }
      window.setConsole("Chamaaa:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
    	window.setConsole("\n");
      for (int i = 0; i < trace_indent; i++) { window.setConsole(" "); }
      window.setConsole("Devolve: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
    	window.setConsole("\n");
      for (int i = 0; i < trace_indent; i++) { window.setConsole(" "); }
      window.setConsole("Token consumido: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
    	  window.setConsole(": \"" + t.image + "\"");
      }
      window.setConsole(" na linha " + t.beginLine + " coluna " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
    	window.setConsole("\n");
      for (int i = 0; i < trace_indent; i++) { window.setConsole(" "); }
      window.setConsole("Visitou o token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
    	  window.setConsole(": \"" + t1.image + "\"");
      }
      window.setConsole(" na linha " + t1.beginLine + " coluna " + t1.beginColumn + ">; Tava esperando: <" + tokenImage[t2] + ">");
    }
  }

}
